@{
    ViewData["Title"] = "Tài khoản của bạn";
    Layout = null;
    @model Net6_Social_Net.Models.UserProfileViewModel   
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="~/css/YourAccount.css" rel="stylesheet" />
    <link href="~/Icon_Plafom/iconWeb.png"  rel="icon" />
    <title>Profile</title>

        <script>

        //MỞ menu BÀI VIẾT
            function toggleMenu(element) {
                event.stopPropagation();
                // Tìm phần tử chứa menu trong thẻ cha của biểu tượng
                var menu = element.nextElementSibling;

                // Đóng tất cả các menu khác nếu đang mở
                document.querySelectorAll('.options-menu').forEach(menuItem => {
                    if (menuItem !== menu) {
                menuItem.style.display = 'none';
                    }
                });

            // Bật hoặc tắt menu hiện tại
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
            }

            // Đóng menu khi nhấp bên ngoài
            window.onclick = function(event) {
                if (!event.target.matches('.options-icon')) {
                document.querySelectorAll('.options-menu').forEach(menu => {
                    menu.style.display = 'none';
                });
                }
            }
    </script>
   

   @*  <script>

        // Xác nhận trước khi xóa bài viết
        function confirmDelete() {
            return confirm("Bạn chắc chắn muốn xóa bài viết này không?");
        }
    </script> *@

    <script>
        // Mở modal và điền thông tin bài viết
        function openEditModal(postId, postContent, postImageUrl, postStatus) {
            event.stopPropagation();
            // Đặt giá trị của các trường từ dữ liệu của bài viết
            document.getElementById('editPostId').value = postId;
            document.getElementById('editContent').value = postContent;
            document.getElementById('editStatus').value = postStatus;
            document.getElementById('editImageFile').value = ''; // Đặt về trống để yêu cầu người dùng chọn ảnh mới nếu muốn
            // Nếu có ảnh bài viết, hiển thị ảnh trong modal
            if (postImageUrl) {
                document.getElementById('imagePreview').src = postImageUrl; // Hiển thị ảnh lên modal
                document.getElementById('imagePreview').style.display='block';
            } else {
                document.getElementById('imagePreview').src = ''; // Nếu không có ảnh, không hiển thị gì
                document.getElementById('imagePreview').style.display='none';
            }

            // Hiển thị modal
            document.getElementById('editModal').style.display = 'block';
        }
        // Đóng modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }
    </script>
   
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                document.getElementById('editImageFile').addEventListener('change', function (event) {
                    var file = event.target.files[0];  // Lấy file đầu tiên trong danh sách các file được chọn
                    if (file) {
                        var reader = new FileReader();  // Tạo đối tượng FileReader để đọc file
                        reader.onload = function (e) {
                            document.getElementById('imagePreview').src = e.target.result;  // Cập nhật src của ảnh trong modal
                            document.getElementById('imagePreview').style.display='block';
                        };
                        reader.readAsDataURL(file);  // Đọc file dưới dạng URL dữ liệu (base64)
                    }
                });
            });
    </script>

    <script>
        // mở modal chỉnh sửa thông tin 
        function openProfileModal() {
            document.getElementById('editProfileModal').style.display = 'block';
        }

        function closeProfileModal() {
            document.getElementById('editProfileModal').style.display = 'none';
        }

        // Xem trước ảnh banner và avatar khi người dùng chọn file mới
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('editBanner').addEventListener('change', function (event) {
                var file = event.target.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        document.getElementById('bannerPreview').src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });

            document.getElementById('editAvatar').addEventListener('change', function (event) {
                var file = event.target.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        document.getElementById('avatarPreview').src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>

    <script>
        //Nút LOGOUT
        document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('logout').addEventListener('click', function (event) {
        var confirmLogout = confirm("Bạn có chắc chắn muốn đăng xuất?");
        if (!confirmLogout) {
            event.preventDefault(); // Ngăn chặn việc chuyển trang nếu người dùng nhấn "Hủy"
        }
    });
});
    </script>

    @* Script cho modal tạo bài viết  *@
     <script>
        function OpenCreateModal() {
            document.getElementById("myModal").style.display = "block";
            }

        function closeModal() {
            document.getElementById("myModal").style.display = "none";
        }  
    </script>


    <script>
        //đổi ảnh khi post  bài
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('editImage').addEventListener('change', function (event) {
                    var file = event.target.files[0];  // Lấy file đầu tiên trong danh sách các file được chọn
                if (file) {
                    var reader = new FileReader();  // Tạo đối tượng FileReader để đọc file
                    reader.onload = function (e) {
                        document.getElementById('imageppreview').src = e.target.result;  // Cập nhật src của ảnh trong modal
                            document.getElementById('imageppreview').style.display='block';
                   };
                    reader.readAsDataURL(file);  // Đọc file dưới dạng URL dữ liệu (base64)
                }

            });
        });
    </script> 

    <style>

        /*css cho cái button chỉnh sửa bài viết*/
        #buttonEdit {
         width:100%;
         font-size: 16px;/* Kích thước chữ */
         border: none; /* Bỏ viền */
         background: none; /* Bỏ nền */
         color: inherit; /* Kế thừa màu sắc của văn bản xung quanh */
         cursor: pointer; /* Con trỏ chuột khi hover sẽ là pointer */
         /* padding: 5px 10px; /* Cung cấp khoảng cách bên trong cho nút */ 
         text-align: left; /* Căn giữa văn bản */
         }

        #buttonEdit :hover {
                 opacity: 0.8;
             }

        #imageppreview {
            max-width: 100%; /* Giới hạn kích thước ảnh không vượt quá 100% chiều rộng của modal */
            max-height: 200px; /* Giới hạn chiều cao của ảnh nếu ảnh quá lớn */
            margin: 0 auto; /* Căn giữa ảnh trong modal */
            display: none; /* Đảm bảo ảnh được hiển thị dưới dạng block element */
            border-radius: 8px; /* Bo tròn góc của ảnh */
        }
       
        
    </style>
    @* modal comment *@
    <style>
        /* Modal overlay */
        .custom-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Nền tối */
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Modal content */
        .custom-modal-content {
            background: #fff;
            width: 90%;
            height: 90%;
            display: flex;
            flex-direction: column;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
        }

        /* Modal body */
        .custom-modal-body {
            display: flex;
            height: 100%;
        }

        /* Phần ảnh (65%) */
        .post-image-container {
            flex: 65%;
            background-color: #000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .post-image-container img {
                /* max-width: 100%; */
                /* max-height: 100%; */
                width: 100%;
                height: 100%;
                object-fit: contain;
            }

        /* Phần thông tin (35%) */
        .post-details-container {
            flex: 35%;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            background: #f9f9f9;
        }

        /* Nút đóng */
        .close-modal {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 24px;
            color: #000;
            cursor: pointer;
        }

        /* Cuộn nội dung */
        #modalComments {
            margin-top: 20px;
        }

        .comment {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
        }

        .form-control {
            width: 100%;
            height: 50px;
            resize: none;
        }

        .btn-primary {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            margin-top: 10px;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }

    </style>
    <link href="~/css/CommentModal_Mobile.css" rel="stylesheet" />

    <link href="~/css/YourAccount_CreatePost_Modal.css" rel="stylesheet" />
    <link href="~/css/YourAccount_ModalEditProfile.css" rel="stylesheet" />
    <link href="~/css/YourAccount_ModalEdit.css" rel="stylesheet" />
    <link href="~/css/YourAccount_for_Mobile.css" rel="stylesheet" />

</head>
<body>
    <div class="home">
        <div class="logo">
            <a href="@Url.Action("Index","Home")">
                <img src="~/Icon_Plafom/454849238_800890952251701_8841246141296174912_n.jpg" alt="Logo Web" />
            </a>
           
        </div>
        <div class="sreachbox">
            <img src="~/Icon_Plafom/Search-icon.png" alt="Search Icon" class="search-icon" />
            <input type="search" placeholder="Tìm kiếm" />
        </div>
       
        <a id="logout" style="text-decoration: none; color: red; font-size: 20px;" asp-action="Logout" asp-controller="Login">Đăng xuất</a>

    </div>
    <div class="banner">
        <div class="bannerprofile">

             @if (!string.IsNullOrEmpty(Model.User.Imagebanner))
            {
                 <img id="bannerFont" src="@Model.User.Imagebanner" alt="Banner"  />
            }
            else
            {
                <img id="bannerFont" src="~/Banner_Profile/23820a81-56c5-40b1-9222-41016d5f5c28_GYuWrKeWgAApkbp.jpg" alt="Banner"  />
            }
            
        </div>
        <div class="avatar">                         
            @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
            {
                <img src="@Model.User.ProfilePicture" alt="User Avatar" />
            }
            else
            {
                 <img src="~/Avatar/454849238_800890952251701_8841246141296174912_n.jpg" alt="Banner"  />
            }
        </div>
        <div class="username">@Model.User.Username</div>
    </div>
    <div class="container">
        <div class="left">
            <p style="font-size:30px ;font-weight:bold">Giới thiệu</p>
            <div class="bio" >
                @Model.User.Bio
            </div>
            @if (Model.User.Email != null || Model.User.PhoneNumber != null)
            {
                <ul class="Thongtin">
                    <li>Gmail : @Model.User.Email</li>
                    <li>@Model.User.PhoneNumber</li>                
                </ul>
                <p></p>
            }                  
            <p></p>
            <button type="button" onclick="openProfileModal()">Sửa thông tin</button>

            <div class="other">một số tính năng sau này bổ sung</div>
            <div clas="Footer">
                <a href="#">Chính sách</a>
                <a href="#">Quyền lợi</a>
            </div>
        </div>
    
        @* Modal chỉnh sửa thông tin tài khoản *@
        <div id="editProfileModal" class="modal-overlay" style="display: none;">
            <div class="modals-content">
                <h2 class="ChinhSua">Chỉnh sửa thông tin cá nhân</h2>
                <span class="close" onclick="closeProfileModal()">×</span>
                <form asp-action="UpdateProfile" asp-controller="YourAccount" method="post" enctype="multipart/form-data">
                    <!-- Trường ID người dùng (ẩn) -->
                    <input type="hidden" name="id" value="@Model.User.UserId" />
                    <!-- Trường Banner -->
                    @if (!string.IsNullOrEmpty(Model.User.Imagebanner))
                    {
                        <img id="bannerPreview" src="@Model.User.Imagebanner" alt="Banner Preview" class="preview-image" />
                    }
                    else
                    {
                        <img  id="bannerPreview" src="~/Banner_Profile/23820a81-56c5-40b1-9222-41016d5f5c28_GYuWrKeWgAApkbp.jpg" alt="Banner" style="width: 90%" />
                    }
                    <!-- Trường Avatar -->
                    @if (!string.IsNullOrEmpty(Model.User.ProfilePicture))
                    {
                        <img id="avatarPreview" src="@Model.User.ProfilePicture" alt="Avatar Preview" class="preview-image" style="border-radius: 50%;" />
                    }
                    else
                    {
                        <img  id="avatarPreview" src="~/Avatar/454849238_800890952251701_8841246141296174912_n.jpg" alt="Avatar" style=" border-radius: 50%;" />
                    }
                    <p></p>
                    <label for="editBanner" class="file-label">Chọn ảnh cho Banner</label>
                    <input type="file" id="editBanner" name="banner" accept="image/*" class="modal-input-file" style="display: none;" />

                    <label for="editAvatar" class="file-label">Chọn ảnh cho Avatar</label>
                    <input type="file" id="editAvatar" name="avatar" accept="image/*" class="modal-input-file" style="display: none;" />
                    <p></p>
                    <!-- Trường Username -->
                    <label for="editUsername">Tên người dùng:</label>
                    <input type="text" id="editUsername" name="username" class="modal-input" value="@Model.User.Username" />

                    <!-- Trường Bio -->
                    <label for="editBio">Tiểu sử:</label>
                    <textarea id="editBio" name="bio" class="modal-textarea">@Model.User.Bio</textarea>
                    <!-- Trường Email-->
                    <label for="editEmail">Gmail</label>
                    <input type="text" id="editUsername" name="email" class="modal-input" value="@Model.User.Email" disabled/>
                    <!-- Footer chứa nút cập nhật cố định -->
                    <div class="modal-footer">
                        <button type="submit" class="modal-saves-button">Cập nhật</button>
                    </div>
                </form>
            </div>
        </div>


        @* phần bên phải  *@
        <div class="right">
            <div class="UpPost">
               <button id="Createpost" onclick="OpenCreateModal()">Tạo bài viết </button>
            </div>
            <!--Modal tạo bài viết-->
            <!-- Thêm vào trong phần <body> -->
            <div id="myModal" class="modal">
                <div class="modal-contentt">
                    <span class="close" onclick="closeModal()">&times;</span>
                    <h2>Đăng bài</h2>
                    <form asp-action="Post" asp-controller="YourAccount" method="post" enctype="multipart/form-data">
                        <textarea name="Content" placeholder="Nội dung bài viết"></textarea>
                        <!-- Thêm combobox chọn trạng thái bài viết -->
                        <label for="StatusPost">Trạng thái bài viết:</label>
                        <select name="StatusPost" id="StatusPost">
                            <option value="Public">Công khai</option>
                            <option value="Private">Riêng tư</option>
                        </select>
                        <img src="" alt="Image Preview" id="imageppreview" />
                        <input type="file" name="ImageFile" id="editImage" class="modal-input-file" accept="image/*" />
                        <button id="postBai" type="submit">Đăng bài</button>
                    </form>
                </div>
            </div>

            @if (Model.Posts.Any())
            {
                foreach (var post in Model.Posts)
                {
                       <div class="post-card" data-id="@post.Id" data-post-id="@post.Id" onclick="openPostModal(this)">
                        <div class="post-header">
                            <h3 id="userName-@post.Id" data-userr-id="@post.UserId" style="font-size:18px;text-transform: capitalize;">@post.UserName</h3>
                            <div class="post-options">
                                <span class="options-icon" onclick="toggleMenu(this)">&#8942;</span>
                                <div class="options-menu">
                                    <ul>
                                        <li style="color:blue">
                                            <button id="buttonEdit" type="button" style="text-decoration:none" onclick="openEditModal('@post.Id', '@post.Content', '@post.ImageUrl', '@post.Status');">Chỉnh sửa bài viết</button>
                                        </li>
                                        <li>
                                            <form id="deletepostform" method="post" style="display:inline;" onsubmit="return deletpost();" onclick="event.stopPropagation()">
                                                <input type="hidden" name="id" value="@post.Id" />
                                                <button type="submit"  style="color:red; border:none; background:none; cursor:pointer;font-size:16px;width:100%; text-align:left">
                                                    Xóa bài viết
                                                </button>
                                            </form>
                                            <script>
                                                function deletpost() {
                                                    event.stopPropagation();
                                                    if (!confirm("Bạn có chắc chắn muốn xóa bài viết này không?")) {
                                                        return false; // Nếu người dùng không đồng ý xóa, dừng hàm tại đây
                                                   }

                                                   var formData = new FormData(document.getElementById("deletepostform"));

                                                      fetch('/YourAccount/DeleteyourPosts', {
                                                      method: 'POST',
                                                      body: formData
                                                       })
                                                     .then(response => response.json())
                                                      .then(data => {
                                                     if (data.success) {
                                                         //alert("Xóa bài viết thành công");
                                                        // Tải lại trang hoặc cập nhật giao diện tùy ý
                                                        window.location.reload();
                                                        } else {
                                                               alert("Lỗi: " + data.error);
                                                              }
                                                               })
                                                   .catch((error) => {
                                                      console.error('Error:', error);
                                                      });
                                                     return false; // Ngăn chặn form submit theo cách mặc định
                                                         }
                                            </script>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <p id="createdAt-@post.Id" style="font-size:14px">@post.CreatedAt.ToString("HH:mm dd/MM/yyyy")</p>
                        <p id="status-@post.Id" style="font-size:14px">@post.Status</p>
                        <p id="content-@post.Id" style="font-size:16px">@post.Content</p>
                        @if (@post.ImageUrl != null)
                        {
                            <img id="image-@post.Id" src="@post.ImageUrl" alt="Alternate Text" class="post-image" />
                        }
                        <div id="comments-@post.Id" style="display:none;">
                            @foreach (var comment in post.Comments)
                            {
                                <div class="comment" data-comment-id="@comment.CommentId" data-user-id="@comment.UserId" data-userpostsub-id="@post.UserId">
                                    <span class="comment-user-name">@comment.UserName</span>
                                    <p class="comment-content">@comment.Content</p>
                                    <p class="comment-created-at">@comment.CreatedAt</p>
                                </div>
                            }
                        </div>
                    </div>

                }
                //modal comment và đổng bọn
                <div id="postModal" class="custom-modal" style="display: none;">
                    <div class="custom-modal-content">
                        <div class="custom-modal-body">
                            <!-- Phần ảnh (65%) -->
                            <div class="post-image-container">
                                <img id="modalImage" src="" alt="Hình ảnh bài viết" />
                            </div>
                            <!-- Phần thông tin bài viết (35%) -->
                            <div class="post-details-container">
                                <div id="modalPostInfo">
                                    <a id="modalUserName" style="text-decoration:none; font-size:20px;font-weight:bold"></a>
                                    <p id="modalCreatedAt" class="text-muted" style="font-size:15px; color: #9c9c9c;"></p>
                                    <span id="modalStatus" class="badge" style="font-size:15px;color: #9c9c9c;"></span>
                                    <p id="modalContent" style="font-size:25px"></p>
                                   
                                </div>
                                <hr />
                                <div id="modalComments">
                                    <!-- Bình luận -->
                                    <h6 style="font-size:16px; margin-bottom:10px;">Bình luận:</h6>
                                </div>
                                <div>
                                    <textarea id="commentInput" class="form-control mt-3" rows="2" placeholder="Viết bình luận..."></textarea>
                                    <button id="submitComment" class="btn-primary" style="width:100%;border-radius:5px;" onclick="submitComment()">Gửi</button>
                                </div>
                                <div id="commentsList">
                                    <!-- Các bình luận sẽ được thêm vào đây -->
                                </div>
                            </div>
                        </div>
                        <!-- Nút đóng -->
                        <span class="close-modal" onclick="closeModalds()">×</span>
                    </div>
                </div>

                <script>
                    function deleteComment(commentId) {
                        // Hiển thị hộp thoại xác nhận
                        const isConfirmed = confirm("Bạn có chắc chắn muốn xóa bình luận này không?");
                        if (!isConfirmed) {
                            return; // Nếu người dùng không đồng ý, thoát hàm
                        }else{
                              // Gửi yêu cầu xóa bình luận qua SignalR đến Hub
                        const userId = parseInt("@Context.Session.GetString("UserId")", 10);
                        connection.invoke("DeleteComment", commentId, userId)
                            .then(function () {
                                console.log("Comment deleted successfully.");
                            })
                            .catch(function (err) {
                                console.error("Error while deleting comment: " + err.toString());
                            });

                        // Lắng nghe sự kiện khi xóa bình luận thất bại
                        connection.on("DeleteCommentFailed", function (errorMessage) {
                            alert(errorMessage);  // Hiển thị thông báo lỗi
                        });

                        // Xóa bình luận khỏi giao diện
                        const commentDiv = document.querySelector(`[data-comment-id='${commentId}']`);
                        if (commentDiv) {
                            commentDiv.remove();  // Xóa bình luận trong modal
                        }

                        const hiddenCommentDiv = document.querySelector(`[data-comment-id='${commentId}']`);
                        if (hiddenCommentDiv) {
                            hiddenCommentDiv.remove();  // Xóa bình luận trong thẻ ẩn
                        }

                        }


                    }
                </script>

            }
            else
            {
                <p style="text-align:center;font-size:30px;font-weight:bold">Hiện tại bạn chưa có bài viết nào.</p>
            }

            <script>
                // Lấy giá trị userId và userName từ session trong ASP.NET Core
                const userId = "@Context.Session.GetString("UserId")";
                const userName = "@Context.Session.GetString("UserName")";
            </script>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.16/signalr.min.js"></script>
            <script>
                    // Khởi tạo kết nối SignalR
                    const connection = new signalR.HubConnectionBuilder()
                        .withUrl("/commentHub") // Địa chỉ của SignalR Hub
                        .build();

                    // Sự kiện nhận bình luận mới từ SignalR
                 connection.on("ReceiveComment", function (userId, userpost,postId, userName, content, createdAt, commentId) {
                    const commentsList = document.getElementById("commentsList");

                    // Tạo phần tử bình luận mới và thêm vào DOM
                    const commentDiv = document.createElement("div");
                    commentDiv.classList.add("comment");
                    commentDiv.dataset.commentId = commentId;
                    const userIdSS = parseInt("@Context.Session.GetString("UserId")", 10);
                    const showDeleteButton = userIdSS == userId;
                    const showDeletpostUserr = userIdSS==userpost;

                    var showicondeletee=showDeleteButton || showDeletpostUserr;
                    commentDiv.innerHTML = `
                        <div style="display: flex; justify-content: space-between;">
                        <a style="text-transform: capitalize; font-weight:bold;font-size:16px; cursor:pointer; text-decoration:none;" href="/UserAccount/Index?id=${userId}">
                               ${userName}
                        </a>
                            ${
                            showicondeletee
                             ? `<span style="font-size:20px; font-weight:bold;cursor:pointer;" onclick="deleteComment(${commentId})">...</span>`
                            : ''
                         }
                        </div>
                        ${content}
                        <br>
                        <span>${new Date(createdAt).toLocaleString()}</span>
                    `;

                    // Kiểm tra nếu commentsList tồn tại
                    if (commentsList) {
                        commentsList.appendChild(commentDiv);
                    } else {
                        console.error("Element with id 'commentsList' not found!");
                    }

                    // Cập nhật thẻ ẩn
                    const hiddenCommentsContainer = document.getElementById(`comments-${postId}`);
                    if (hiddenCommentsContainer) {
                        const hiddenCommentDiv = document.createElement("div");
                        hiddenCommentDiv.classList.add("comment");
                        hiddenCommentDiv.dataset.commentId = commentId;
                        hiddenCommentDiv.dataset.userId = userId;
                        hiddenCommentDiv.dataset.userpostsubId = userpost;
                        hiddenCommentDiv.innerHTML = `
                            <span class="comment-user-name">${userName}</span>
                            <p class="comment-content">${content}</p>
                            <p class="comment-created-at">${new Date(createdAt).toLocaleString()}</p>
                            <p class="comment-choose" >...</p>
                        `;
                        hiddenCommentsContainer.appendChild(hiddenCommentDiv);
                    } else {
                        console.error(`Element with id 'comments-${postId}' not found!`);
                    }
                });

                    let currentPostId = null;
                    // Hàm mở modal
                 function openPostModal(buttonElement) {
                     document.body.classList.add("modal-open"); // Ngăn cuộn
                    // Lấy postId từ thuộc tính data-post-id
                        currentPostId = buttonElement.getAttribute("data-post-id");
                        const modal = document.getElementById("postModal");

                    // Gửi yêu cầu tham gia nhóm
                         connection.invoke("JoinPostGroup", parseInt(currentPostId, 10))
                        .catch(function (err) {
                            console.error("Failed to join group:", err.toString());
                        });

                        // Lấy dữ liệu từ DOM dựa trên ID bài viết
                    const content = document.getElementById(`content-${currentPostId}`).innerText;
                    const status = document.getElementById(`status-${currentPostId}`).innerText;

                    const imageElement = document.getElementById(`image-${currentPostId}`); // Lấy thẻ img
                    const imageUrl = imageElement ? imageElement.src : ""; // Kiểm tra xem thẻ img có tồn tại không

                    const createdAt = document.getElementById(`createdAt-${currentPostId}`)?.innerText || "";
                    // const userName = document.getElementById(`userName-${currentPostId}`)?.innerText || "Người dùng";

                    // Lấy username và userid từ thẻ tương ứng
                    const userNameElement = document.getElementById(`userName-${currentPostId}`);
                    const userName = userNameElement?.innerText || "Người dùng"; // Tên người dùng
                    const commentUserId = userNameElement?.getAttribute("data-userr-id"); // Lấy userId từ thuộc tính data

                        // Đổ dữ liệu vào modal
                        document.getElementById("modalContent").innerText = content;
                        document.getElementById("modalStatus").innerText = status;
                        document.getElementById("modalCreatedAt").innerText = createdAt;
                        //document.getElementById("modalUserName").innerText = userName;

                        const modalUserName = document.getElementById("modalUserName");
                        modalUserName.innerText = userName;
                        if (commentUserId) {
                            modalUserName.href = `/UserAccount/Index?id=${commentUserId}`;
                        } else {
                            modalUserName.removeAttribute("href"); // Nếu không có userId, xóa href
                        }

                         // Xử lý ảnh
                        const modalImageContainer = document.querySelector(".post-image-container");
                        const modalImage = document.getElementById("modalImage");

                        if (imageUrl) {
                            modalImage.src = imageUrl; // Gán URL hình ảnh
                            modalImageContainer.style.display = "block"; // Hiển thị container ảnh
                        } else {
                            modalImage.src="/Icon_Plafom/454849238_800890952251701_8841246141296174912_n.jpg";
                            modalImageContainer.style.display = "block"; // Ẩn container nếu không có ảnh
                        }

                        // Lấy các bình luận của bài viết
                        const commentsContainer = document.getElementById(`comments-${currentPostId}`);
                        const commentsList = document.getElementById("commentsList");
                        commentsList.innerHTML = ""; // Xóa các bình luận cũ

                        // Duyệt qua các bình luận và hiển thị trong modal
                        if (commentsContainer) {
                            const comments = commentsContainer.querySelectorAll(".comment");
                            comments.forEach(function (commentElement) {
                                const commentUserName = commentElement.querySelector(".comment-user-name").innerText;
                                const commentContent = commentElement.querySelector(".comment-content").innerText;
                                const commentCreatedAt = commentElement.querySelector(".comment-created-at").innerText;
                                const commentId = commentElement.getAttribute("data-comment-id");

                                const commentUserId = commentElement.getAttribute("data-user-id"); // Lấy userId của bình luận

                                const postUserId=commentElement.getAttribute("data-userpostsub-id");

                               const userIdSS = parseInt("@Context.Session.GetString("UserId")", 10);
                                // Tạo phần tử bình luận mới
                                const commentDiv = document.createElement("div");
                                commentDiv.classList.add("comment");
                                commentDiv.setAttribute("data-comment-id", commentId);

                             const showDeleteButton = userIdSS == commentUserId
                             const showDeletUserPost= userIdSS == postUserId;
                             const showDeleteIcon = showDeleteButton || showDeletUserPost;
                                // Tạo HTML cho mỗi bình luận
                             commentDiv.innerHTML =
                            `<div style="display: flex; justify-content: space-between;">
                                <a style="text-transform: capitalize; font-weight:bold;font-size:16px; cursor:pointer; text-decoration:none;" href="/UserAccount/Index?id=${commentUserId}">
                                    ${commentUserName}
                                </a>
                            ${
                             showDeleteIcon
                            ? `<span style="font-size:20px; font-weight:bold;cursor:pointer;" onclick="deleteComment(${commentId})">...</span>`
                             : ''
                                }

                            </div>
                            ${commentContent}
                            <br>
                            <span>${commentCreatedAt}</span>
                            `;
                                // Thêm bình luận vào danh sách bình luận trong modal
                                commentsList.appendChild(commentDiv);
                            });
                        }
                        // Hiển thị modal
                        modal.style.display = "flex";
                    }

                    // Hàm đóng modal
                    function closeModalds() {
                        document.body.classList.remove("modal-open"); // Cho phép cuộn lại
                        const modal = document.getElementById("postModal");
                        modal.style.display = "none";

                    if (currentPostId !== null) {
                        // Gửi yêu cầu rời nhóm
                        connection.invoke("LeavePostGroup", parseInt(currentPostId, 10))
                            .catch(function (err) {
                                console.error("Failed to leave group:", err.toString());
                            });
                    }
                    // Reset postId
                    currentPostId = null;
                    }

                    // Hàm gửi bình luận
                    function submitComment() {
                        const commentInput = document.getElementById("commentInput");

                        if (commentInput) {
                            const commentContent = commentInput.value.trim();
                            if (commentContent === "") {
                                alert("Vui lòng nhập bình luận!");
                                return;
                            }
                        // Chuyển currentPostId từ chuỗi sang số nguyên
                        const postId = parseInt(currentPostId, 10);

                        // Kiểm tra nếu postId không hợp lệ
                        if (isNaN(postId)) {
                            console.error("Invalid postId");
                            return;
                        }
                            // Lấy userId từ session và chuyển đổi thành int
                            const userId = parseInt("@Context.Session.GetString("UserId")", 10);

                            // Kiểm tra nếu userId hợp lệ
                            if (isNaN(userId)) {
                                console.error("Invalid userId");
                                return;
                            }

                            // const userId = "@Context.Session.GetString("UserId")"; Lấy userId từ session
                            const createdAt = new Date().toISOString();

                            console.log("postId:", postId);
                            console.log("userId:", userId);
                            console.log("commentContent:", commentContent);
                            console.log("createdAt:", createdAt);

                            // Gửi bình luận qua SignalR đến Hub
                            connection.invoke("SendComment", postId, userId, commentContent, createdAt)
                                .catch(function (err) {
                                    return console.error(err.toString());
                                });

                            // Xóa giá trị trong ô nhập liệu sau khi gửi
                            commentInput.value = "";
                        }
                    }
                    // Kết nối SignalR khi trang được tải
                    connection.start().catch(function (err) {
                        return console.error(err.toString());
                    });
            </script>

            @*   Hết modal anh em và đồng bọn *@

            
           
        </div>  
        <!-- Modal chỉnh sửa bài viết -->
        <div id="editModal" class="modal-overlay">
            <div class="modal-content">
                <h2 class="ChinhSua">Chỉnh sửa bài viết</h2>
                <span class="close" onclick="closeEditModal()">×</span>
                <form id="editPostForm" method="post" enctype="multipart/form-data">
                    <input type="hidden" id="editPostId" name="idpost" />

                    <!-- Trường Content -->
                    <textarea id="editContent" name="Content" class="modal-textarea"></textarea>

                    <label for="editStatus">Trạng thái:</label>
                    <select id="editStatus" name="StatusPost" class="modal-select">
                        <option value="Public">Công khai</option>
                        <option value="Private">Riêng tư</option>
                    </select>

                    <img id="imagePreview" src="" alt="Image Preview">
                    <input type="file" id="editImageFile" name="ImageFile" accept="image/*" class="modal-input-file" />

                    <!-- Trường StatusPost -->
                    <div class="modal-buttons">
                        <button type="button" class="modal-save-button" onclick="submitEditPost()">Cập nhật</button>
                    </div>
                </form>
            </div>
        </div>
        <script>
            function submitEditPost() {
                event.stopPropagation()
                var formData = new FormData(document.getElementById("editPostForm"));

                fetch('/YourAccount/UpdatePost', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cập nhật giao diện người dùng nếu cần
                            // alert("Cập nhật bài viết thành công!");
                            closeEditModal();
                            // Có thể gọi lại hàm để tải lại danh sách bài viết hoặc cập nhật trực tiếp trên giao diện
                            window.location.reload();
                        } else {
                            alert("Lỗi: " + data.error);
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
            }
        </script>
      
    </div>
</body>
</html>
